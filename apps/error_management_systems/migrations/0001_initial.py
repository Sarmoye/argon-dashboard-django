# Generated by Django 4.2.20 on 2025-03-30 09:36

from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='ErrorCategory',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(db_index=True, max_length=100, unique=True)),
                ('description', models.TextField(blank=True)),
                ('severity_level', models.IntegerField(choices=[(1, 'Low'), (2, 'Medium'), (3, 'High'), (4, 'Critical')], default=2)),
            ],
        ),
        migrations.CreateModel(
            name='System',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True, verbose_name='Nom du Système')),
                ('system_classification', models.CharField(blank=True, choices=[('A', 'A'), ('B', 'B'), ('C', 'C'), ('D', 'D')], max_length=1, null=True, verbose_name='Classification du Système')),
                ('description', models.TextField(blank=True, verbose_name='Description du Système')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='Service',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Nom du Service')),
                ('service_classification', models.CharField(blank=True, choices=[('primary', 'Primary Service'), ('secondary', 'Secondary Service'), ('tertiary', 'Tertiary Service'), ('external', 'External Service')], max_length=50, null=True, verbose_name='Classification du Service')),
                ('description', models.TextField(blank=True, verbose_name='Description du Service')),
                ('owner', models.CharField(blank=True, max_length=100, null=True, verbose_name='Responsable du Service')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('system', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='services', to='error_management_systems.system', verbose_name='Système')),
            ],
            options={
                'unique_together': {('name', 'system')},
            },
        ),
        migrations.CreateModel(
            name='ErrorType',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('error_code', models.CharField(db_index=True, max_length=100, unique=True)),
                ('error_description', models.TextField()),
                ('error_metadata', models.JSONField(blank=True, null=True, verbose_name='Detailed Error Metadata')),
                ('root_cause', models.TextField(blank=True, verbose_name='Root Cause Analysis')),
                ('detected_by', models.CharField(choices=[('monitoring', 'Monitoring System'), ('logs', 'Log Analysis'), ('user_report', 'User Report'), ('automated_test', 'Automated Test'), ('other', 'Other')], default='logs', max_length=100, verbose_name='Detected By')),
                ('error_source', models.CharField(choices=[('internal', 'Internal'), ('external', 'External'), ('third_party', 'Third-Party Service')], default='internal', max_length=100, verbose_name='Error Source')),
                ('dependency_chain', models.JSONField(blank=True, null=True, verbose_name='Service Dependencies')),
                ('first_occurrence', models.DateTimeField(auto_now_add=True)),
                ('last_occurrence', models.DateTimeField(auto_now=True)),
                ('total_occurrences', models.PositiveIntegerField(default=1)),
                ('is_active', models.BooleanField(db_index=True, default=True)),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='error_types', to='error_management_systems.errorcategory', verbose_name='Error Category')),
                ('service', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='error_types', to='error_management_systems.service', verbose_name='Service')),
                ('system', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='error_types', to='error_management_systems.system', verbose_name='System')),
            ],
        ),
        migrations.CreateModel(
            name='ErrorTicket',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('ticket_number', models.CharField(db_index=True, max_length=100, unique=True)),
                ('status', models.CharField(choices=[('OPEN', 'Open'), ('IN_PROGRESS', 'In Progress'), ('PENDING', 'Pending'), ('RESOLVED', 'Resolved'), ('CLOSED', 'Closed'), ('BLOCKED', 'Blocked')], db_index=True, default='OPEN', max_length=20)),
                ('priority', models.CharField(choices=[('P1', 'Critical - Immediate Action Required'), ('P2', 'High - Urgent Resolution'), ('P3', 'Medium - Normal Priority'), ('P4', 'Low - Minor Impact')], db_index=True, default='P3', max_length=20)),
                ('title', models.CharField(max_length=255)),
                ('description', models.TextField()),
                ('assigned_to', models.CharField(blank=True, db_index=True, max_length=100, null=True)),
                ('assigned_team', models.CharField(blank=True, max_length=100, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('resolved_at', models.DateTimeField(blank=True, null=True)),
                ('ticket_metadata', models.JSONField(blank=True, null=True, verbose_name='Additional Ticket Metadata')),
                ('business_impact', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True, verbose_name='Estimated Business Impact')),
                ('impacted_services', models.TextField(blank=True, verbose_name='Impacted Services/Systems')),
                ('root_cause', models.TextField(blank=True, verbose_name='Root Cause Analysis')),
                ('resolution_details', models.TextField(blank=True, verbose_name='Resolution Details')),
                ('compliance_checked', models.BooleanField(default=False)),
                ('regulatory_impact', models.CharField(blank=True, choices=[('gdpr', 'GDPR'), ('hipaa', 'HIPAA'), ('pci', 'PCI DSS'), ('sox', 'SOX'), ('none', 'No Specific Regulation')], max_length=100)),
                ('modification_history', models.JSONField(blank=True, default=list, verbose_name='Ticket Modification History')),
                ('estimated_downtime', models.DurationField(blank=True, null=True, verbose_name='Estimated Downtime')),
                ('remediation_complexity', models.CharField(choices=[('low', 'Low - Simple Fix'), ('medium', 'Medium - Moderate Effort'), ('high', 'High - Complex Resolution'), ('critical', 'Critical - Comprehensive Redesign')], default='medium', max_length=50, verbose_name='Remediation Complexity')),
                ('recommended_actions', models.TextField(blank=True, verbose_name='AI-Suggested Recommended Actions')),
                ('comments', models.TextField(blank=True, verbose_name='Comments')),
                ('documented_knowledge_base', models.BooleanField(default=False, verbose_name='Documented in Knowledge Base')),
                ('error_type', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='tickets', to='error_management_systems.errortype', verbose_name='Associated Error Type')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ErrorEvent',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('event_id', models.CharField(db_index=True, max_length=100, unique=True)),
                ('timestamp', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('inserted_by', models.CharField(default='Unknown', max_length=50, verbose_name='Inserted by')),
                ('event_log', models.TextField(blank=True, verbose_name='Messages de logs')),
                ('source_ip', models.CharField(blank=True, null=True, verbose_name='Source IP Address')),
                ('trigger_event', models.TextField(blank=True, verbose_name='Trigger Event')),
                ('error_count', models.PositiveIntegerField(default=1)),
                ('environment', models.CharField(choices=[('development', 'Development'), ('staging', 'Staging'), ('production', 'Production'), ('testing', 'Testing')], default='production', max_length=50, verbose_name='Environment')),
                ('error_type', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='events', to='error_management_systems.errortype', verbose_name='Associated Error Type')),
                ('service', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='error_events', to='error_management_systems.service', verbose_name='Service')),
                ('system', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='error_events', to='error_management_systems.system', verbose_name='System')),
            ],
        ),
        migrations.AddIndex(
            model_name='errortype',
            index=models.Index(fields=['system', 'service'], name='error_manag_system__b0c069_idx'),
        ),
        migrations.AddIndex(
            model_name='errortype',
            index=models.Index(fields=['first_occurrence'], name='error_manag_first_o_424426_idx'),
        ),
        migrations.AddIndex(
            model_name='errortype',
            index=models.Index(fields=['last_occurrence'], name='error_manag_last_oc_522ae2_idx'),
        ),
        migrations.AddConstraint(
            model_name='errortype',
            constraint=models.UniqueConstraint(fields=('system', 'service', 'error_code'), name='unique_error_type'),
        ),
        migrations.AddIndex(
            model_name='errorticket',
            index=models.Index(fields=['status', 'priority'], name='error_manag_status_42048f_idx'),
        ),
        migrations.AddIndex(
            model_name='errorticket',
            index=models.Index(fields=['created_at', 'resolved_at'], name='error_manag_created_e57697_idx'),
        ),
        migrations.AddIndex(
            model_name='errorticket',
            index=models.Index(fields=['assigned_to'], name='error_manag_assigne_74a24a_idx'),
        ),
        migrations.AddConstraint(
            model_name='errorticket',
            constraint=models.UniqueConstraint(fields=('error_type', 'created_at'), name='unique_error_ticket'),
        ),
        migrations.AddIndex(
            model_name='errorevent',
            index=models.Index(fields=['timestamp', 'system'], name='error_manag_timesta_88a738_idx'),
        ),
        migrations.AddIndex(
            model_name='errorevent',
            index=models.Index(fields=['source_ip'], name='error_manag_source__2a856e_idx'),
        ),
        migrations.AddConstraint(
            model_name='errorevent',
            constraint=models.UniqueConstraint(fields=('error_type', 'timestamp', 'system', 'service'), name='unique_error_event'),
        ),
    ]
